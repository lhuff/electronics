
interval.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c6  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f4  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000229  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a1  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__vector_2>
   6:	a1 c0       	rjmp	.+322    	; 0x14a <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ee       	ldi	r30, 0xE0	; 224
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 38       	cpi	r26, 0x82	; 130
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e8       	ldi	r26, 0x82	; 130
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a6 38       	cpi	r26, 0x86	; 134
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	8b d0       	rcall	.+278    	; 0x16c <main>
  56:	c2 c0       	rjmp	.+388    	; 0x1dc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z12set_sevensegh>:
const int int_delay = 60;
unsigned char read_val = 0;
bool rise_edge_flag = true;
//unsigned int array_len = sizeof(messages[0]);

int set_sevenseg(unsigned char val){
  5a:	28 e0       	ldi	r18, 0x08	; 8
  5c:	30 e0       	ldi	r19, 0x00	; 0
		PORTA = curr;
		val = val >> 1;
		
		PORTA = 0x02|curr;
		PORTA = 0x00|curr;
		PORTA = 0x04;
  5e:	54 e0       	ldi	r21, 0x04	; 4
bool rise_edge_flag = true;
//unsigned int array_len = sizeof(messages[0]);

int set_sevenseg(unsigned char val){
	for(int i=0;i<8;i++){
		unsigned char curr = 0x01&val;
  60:	98 2f       	mov	r25, r24
  62:	91 70       	andi	r25, 0x01	; 1
		PORTA = curr;
  64:	9b bb       	out	0x1b, r25	; 27
		val = val >> 1;
  66:	86 95       	lsr	r24
		
		PORTA = 0x02|curr;
  68:	49 2f       	mov	r20, r25
  6a:	42 60       	ori	r20, 0x02	; 2
  6c:	4b bb       	out	0x1b, r20	; 27
		PORTA = 0x00|curr;
  6e:	9b bb       	out	0x1b, r25	; 27
		PORTA = 0x04;
  70:	5b bb       	out	0x1b, r21	; 27
		PORTA = 0x00;
  72:	1b ba       	out	0x1b, r1	; 27
  74:	21 50       	subi	r18, 0x01	; 1
  76:	31 09       	sbc	r19, r1
unsigned char read_val = 0;
bool rise_edge_flag = true;
//unsigned int array_len = sizeof(messages[0]);

int set_sevenseg(unsigned char val){
	for(int i=0;i<8;i++){
  78:	21 15       	cp	r18, r1
  7a:	31 05       	cpc	r19, r1
  7c:	89 f7       	brne	.-30     	; 0x60 <_Z12set_sevensegh+0x6>
		PORTA = 0x00|curr;
		PORTA = 0x04;
		PORTA = 0x00;
	}
	return 1;
}
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	08 95       	ret

00000084 <_Z5startv>:


int start(void){
	while(1){
		//Depending on mode, trigger FET every x seconds
		set_sevenseg(0xFE);
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	e9 df       	rcall	.-46     	; 0x5a <_Z12set_sevensegh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	84 e3       	ldi	r24, 0x34	; 52
  8c:	9c e0       	ldi	r25, 0x0C	; 12
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <_Z5startv+0xa>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z5startv+0x14>
  98:	00 00       	nop
		_delay_ms(500);
		set_sevenseg(0xFF);
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	de df       	rcall	.-68     	; 0x5a <_Z12set_sevensegh>
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <_Z5startv+0x20>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_Z5startv+0x2a>
  ae:	00 00       	nop
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <_Z5startv>

000000b2 <__vector_2>:
		_delay_ms(500);
	}
	return 1;
}
//Mode button pressed
ISR(PCINT0_vect){
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	if (rise_edge_flag){
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	88 23       	and	r24, r24
  da:	19 f1       	breq	.+70     	; 0x122 <__vector_2+0x70>
		set_sevenseg(0xFB);
  dc:	8b ef       	ldi	r24, 0xFB	; 251
  de:	bd df       	rcall	.-134    	; 0x5a <_Z12set_sevensegh>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	86 e7       	ldi	r24, 0x76	; 118
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_2+0x34>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_2+0x3e>
  f0:	00 00       	nop
		_delay_ms(int_delay);
		mode++;
  f2:	80 91 84 00 	lds	r24, 0x0084
  f6:	90 91 85 00 	lds	r25, 0x0085
  fa:	01 96       	adiw	r24, 0x01	; 1
		if (mode == 4){
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	91 05       	cpc	r25, r1
 100:	29 f0       	breq	.+10     	; 0x10c <__vector_2+0x5a>
//Mode button pressed
ISR(PCINT0_vect){
	if (rise_edge_flag){
		set_sevenseg(0xFB);
		_delay_ms(int_delay);
		mode++;
 102:	90 93 85 00 	sts	0x0085, r25
 106:	80 93 84 00 	sts	0x0084, r24
 10a:	04 c0       	rjmp	.+8      	; 0x114 <__vector_2+0x62>
		if (mode == 4){
			mode = 0;
 10c:	10 92 85 00 	sts	0x0085, r1
 110:	10 92 84 00 	sts	0x0084, r1
		}
		count = 0;
 114:	10 92 83 00 	sts	0x0083, r1
 118:	10 92 82 00 	sts	0x0082, r1
		rise_edge_flag = false;
 11c:	10 92 60 00 	sts	0x0060, r1
 120:	03 c0       	rjmp	.+6      	; 0x128 <__vector_2+0x76>
	}else{
		rise_edge_flag = true;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 60 00 	sts	0x0060, r24
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_3>:
//Start button pressed
ISR(PCINT1_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
	set_sevenseg(0xFB);
 154:	8b ef       	ldi	r24, 0xFB	; 251
 156:	81 df       	rcall	.-254    	; 0x5a <_Z12set_sevensegh>
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	86 e7       	ldi	r24, 0x76	; 118
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <__vector_3+0x14>
 166:	00 c0       	rjmp	.+0      	; 0x168 <__stack+0x9>
 168:	00 00       	nop
	_delay_ms(int_delay);
	start();
 16a:	8c df       	rcall	.-232    	; 0x84 <_Z5startv>

0000016c <main>:

int main(void)
{
	//unsigned char read_val;
	//Set PA7, PA2, PA1, and PA0 of Port A as output, rest as input **Subject to change**
	DDRA = 0b10000111;
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	8a bb       	out	0x1a, r24	; 26
	
	//Set all pins of Port B as output **Subject to change**
	DDRB = 0b00000000;
 170:	17 ba       	out	0x17, r1	; 23
	
	//Enable pin change interrupts
	GIMSK |= (1<<PCIE0)|(1<<PCIE1);
 172:	8b b7       	in	r24, 0x3b	; 59
 174:	80 63       	ori	r24, 0x30	; 48
 176:	8b bf       	out	0x3b, r24	; 59
	
	//Listen for interrupts on pins 10 and 5
	PCMSK0 |= (1<<PCINT3);
 178:	93 9a       	sbi	0x12, 3	; 18
	PCMSK1 |= (1<<PCINT10);
 17a:	80 b5       	in	r24, 0x20	; 32
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 bd       	out	0x20, r24	; 32
	
	//Enable all interrupts
	sei();
 180:	78 94       	sei
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	86 e1       	ldi	r24, 0x16	; 22
 186:	91 e1       	ldi	r25, 0x11	; 17
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x1c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x26>
 192:	00 00       	nop
    while(1){
		
		//PORTA |= 0b10000000; //FOR TESTING
		
		_delay_ms(700); //##ORIGINAL##
		set_sevenseg(messages[mode][count]);
 194:	e0 91 84 00 	lds	r30, 0x0084
 198:	f0 91 85 00 	lds	r31, 0x0085
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	80 91 82 00 	lds	r24, 0x0082
 1ac:	90 91 83 00 	lds	r25, 0x0083
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	ef 59       	subi	r30, 0x9F	; 159
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	4f df       	rcall	.-354    	; 0x5a <_Z12set_sevensegh>
		count++;
 1bc:	80 91 82 00 	lds	r24, 0x0082
 1c0:	90 91 83 00 	lds	r25, 0x0083
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 83 00 	sts	0x0083, r25
 1ca:	80 93 82 00 	sts	0x0082, r24
		if (count==8){
 1ce:	08 97       	sbiw	r24, 0x08	; 8
 1d0:	c1 f6       	brne	.-80     	; 0x182 <main+0x16>
			count = 0;
 1d2:	10 92 83 00 	sts	0x0083, r1
 1d6:	10 92 82 00 	sts	0x0082, r1
 1da:	d3 cf       	rjmp	.-90     	; 0x182 <main+0x16>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
